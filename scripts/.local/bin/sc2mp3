#!/usr/bin/env python3

"""Download MP3 file from SoundCloud and tag it with album cover and provided info.
Run with sc2mp3 "https://soundcloud.com/song/link|song title|artist[|album]"

Requires yt-dlp installed globally (pipx install yt-dlp)
"""

import os
import sys

EXTENSION = "mp3"


def download_file(info):
    opts = {
        "-f": EXTENSION,
        "-o": '"%(uploader)s - %(title)s.%(ext)s"',
        "--embed-thumbnail": "",
        "--embed-metadata": "",
    }

    # --parse-metadata "oneword:%(artist)s" seems to try to expand oneword into a field
    # and fails to set artist (or any other metadata). So, instead, set artist and other
    # metadata to two-word placeholder, then use --replace-in-metadata to replace
    # placeholder with actual value we want
    replace_string = "REPLACE ME"

    if info.get("title", False):
        opts["-o"] = f"\"{info['artist']} - {info['title']}.{EXTENSION}\""
        opts["--parse-metadata_1"] = f'"{replace_string}:%(title)s"'
        opts["--replace-in-metadata_1"] = (
            f"\"title\" \"{replace_string}\" \"{info['title']}\""
        )
        opts["--parse-metadata_2"] = f'"{replace_string}:%(artist)s"'
        opts["--replace-in-metadata_2"] = (
            f"\"artist\" \"{replace_string}\" \"{info['artist']}\""
        )

    if info.get("album", False):
        opts["--parse-metadata_3"] = f'"{replace_string}:%(album)s"'
        opts["--replace-in-metadata_3"] = (
            f"\"album\" \"{replace_string}\" \"{info['album']}\""
        )

    opts_string = ""
    for switch, val in opts.items():
        if switch.startswith("--parse-metadata") or switch.startswith(
            "--replace-in-metadata"
        ):
            opts_string += f" {switch[:-2]}"
        else:
            opts_string += f" {switch}"

        if val != "":
            opts_string += f" {val}"

    yt_dl_command = f"yt-dlp{opts_string} {info['url']}"
    # shell out to yt-dlp to be able to use globally-installed version (installed with
    # pipx)
    os.system(yt_dl_command)


if __name__ == "__main__":
    # split command-line argument on | for url, title, artist, and album
    try:
        song_info_list = sys.argv[1].split("|")
        song_info = {"url": song_info_list[0]}

        if len(song_info_list) > 1:
            song_info["title"] = song_info_list[1]
            song_info["artist"] = song_info_list[2]
        if len(song_info_list) == 4:
            song_info["album"] = song_info_list[3]

        download_file(song_info)
    except Exception:
        print(
            f'USAGE: {sys.argv[0]} "https://soundcloud.com/song/link|song title|artist[|album]"'
        )
        exit(1)
